## GENERAL ##
.uuid : UUID.fromString(expr)
    java.lang.String -> java.util.UUID.fromString($expr$)$END$

## PARTNERS ##
.bindException : bindException{expr}
    java.lang.Throwable -> bindException { $expr$ } $END$
.bindNull : bindExceptionIfNull(expr){}
    ANY -> bindExceptionIfNull($expr$) { \
                $END$\
            }
            
## Strikt ##
.expectThat : expectThat(expr)
    ANY -> strikt.api.expectThat($expr$)$END$

## MockK ##
.every : every{expr}
    ANY -> io.mockk.every{$expr$}$END$
.cevery : coEvery{expr}
    ANY -> io.mockk.coEvery{$expr$}$END$
.verify : verify{expr}
    ANY -> io.mockk.verify(exactly = 1){$expr$}$END$
.cverify : coVerify(exactly = 1){expr}
    ANY -> io.mockk.coVerify(exactly = 1){$expr$}$END$
.slot   : val name = slot<$expr$>()$END$
    ANY -> val $NAME:suggestVariableName()$ = slot<$expr$>()$END$
